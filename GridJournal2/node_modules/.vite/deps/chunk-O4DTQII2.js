import {
  makeFocusProps,
  useFocus
} from "./chunk-E6CFKS6H.js";
import {
  LoaderSlot,
  VLabel,
  makeLoaderProps,
  useLoader
} from "./chunk-775XNTFY.js";
import {
  VExpandXTransition,
  VSlideYTransition
} from "./chunk-U3HAJG7B.js";
import {
  MaybeTransition,
  makeTransitionProps
} from "./chunk-2VVRXWOG.js";
import {
  VIcon
} from "./chunk-CZPMN5W5.js";
import {
  useBackgroundColor,
  useTextColor
} from "./chunk-GAH3NRGC.js";
import {
  makeThemeProps,
  provideTheme
} from "./chunk-Y32YR2TB.js";
import {
  convertToUnit,
  defineComponent,
  genericComponent,
  getUid,
  nullifyTransforms,
  pick,
  propsFactory,
  standardEasing,
  useRender
} from "./chunk-UQ3Q3FRV.js";
import {
  Fragment,
  __spreadProps,
  __spreadValues,
  computed,
  createVNode,
  mergeProps,
  ref,
  toRef,
  vShow,
  watch,
  withDirectives
} from "./chunk-D573C25J.js";

// node_modules/vuetify/lib/components/VField/VFieldLabel.mjs
var VFieldLabel = defineComponent({
  name: "VFieldLabel",
  props: {
    floating: Boolean
  },
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    return () => {
      return createVNode(VLabel, {
        "class": ["v-field-label", {
          "v-field-label--floating": props.floating
        }],
        "aria-hidden": props.floating || void 0
      }, slots);
    };
  }
});

// node_modules/vuetify/lib/components/VField/VField.mjs
import "D:/Muhammad Aziz Taufiqurrahman/Data Aziz Taufiqurrahman/Kuliah Polban/Semester 5/Pengembangan Web/TugasBesar/GridJournal/GridJournal2/node_modules/vuetify/lib/components/VField/VField.css";
var allowedVariants = ["underlined", "outlined", "filled", "contained", "plain"];
var makeVFieldProps = propsFactory(__spreadValues(__spreadValues({
  appendInnerIcon: String,
  bgColor: String,
  clearable: Boolean,
  clearIcon: {
    type: String,
    default: "$clear"
  },
  active: Boolean,
  color: String,
  dirty: Boolean,
  disabled: Boolean,
  error: Boolean,
  label: String,
  persistentClear: Boolean,
  prependInnerIcon: String,
  reverse: Boolean,
  singleLine: Boolean,
  variant: {
    type: String,
    default: "filled",
    validator: (v) => allowedVariants.includes(v)
  }
}, makeThemeProps()), makeLoaderProps()), "v-field");
var VField = genericComponent()({
  name: "VField",
  inheritAttrs: false,
  props: __spreadValues(__spreadValues({
    id: String
  }, makeFocusProps()), makeVFieldProps()),
  emits: {
    "click:clear": (e) => true,
    "click:prepend-inner": (e) => true,
    "click:append-inner": (e) => true,
    "click:control": (e) => true,
    "update:focused": (focused) => true,
    "update:modelValue": (val) => true
  },
  setup(props, _ref) {
    let {
      attrs,
      emit,
      slots
    } = _ref;
    const {
      themeClasses
    } = provideTheme(props);
    const {
      loaderClasses
    } = useLoader(props);
    const {
      focusClasses,
      isFocused,
      focus,
      blur
    } = useFocus(props);
    const isActive = computed(() => props.dirty || props.active);
    const hasLabel = computed(() => !props.singleLine && !!(props.label || slots.label));
    const uid = getUid();
    const id = computed(() => props.id || `input-${uid}`);
    const labelRef = ref();
    const floatingLabelRef = ref();
    const controlRef = ref();
    const {
      backgroundColorClasses,
      backgroundColorStyles
    } = useBackgroundColor(toRef(props, "bgColor"));
    const {
      textColorClasses,
      textColorStyles
    } = useTextColor(computed(() => {
      return isActive.value && isFocused.value && !props.error && !props.disabled ? props.color : void 0;
    }));
    watch(isActive, (val) => {
      if (hasLabel.value) {
        const el = labelRef.value.$el;
        const targetEl = floatingLabelRef.value.$el;
        const rect = nullifyTransforms(el);
        const targetRect = targetEl.getBoundingClientRect();
        const x = targetRect.x - rect.x;
        const y = targetRect.y - rect.y - (rect.height / 2 - targetRect.height / 2);
        const targetWidth = targetRect.width / 0.75;
        const width = Math.abs(targetWidth - rect.width) > 1 ? {
          maxWidth: convertToUnit(targetWidth)
        } : void 0;
        const duration = parseFloat(getComputedStyle(el).transitionDuration) * 1e3;
        const scale = parseFloat(getComputedStyle(targetEl).getPropertyValue("--v-field-label-scale"));
        el.style.visibility = "visible";
        targetEl.style.visibility = "hidden";
        el.animate([{
          transform: "translate(0)"
        }, __spreadValues({
          transform: `translate(${x}px, ${y}px) scale(${scale})`
        }, width)], {
          duration,
          easing: standardEasing,
          direction: val ? "normal" : "reverse"
        }).finished.then(() => {
          el.style.removeProperty("visibility");
          targetEl.style.removeProperty("visibility");
        });
      }
    }, {
      flush: "post"
    });
    const slotProps = computed(() => ({
      isActive,
      isFocused,
      controlRef,
      blur,
      focus
    }));
    function onClick(e) {
      if (e.target !== document.activeElement) {
        e.preventDefault();
      }
      emit("click:control", e);
    }
    useRender(() => {
      var _slots$prependInner, _slots$default, _slots$appendInner;
      const isOutlined = props.variant === "outlined";
      const hasPrepend = slots.prependInner || props.prependInnerIcon;
      const hasClear = !!(props.clearable || slots.clear);
      const hasAppend = !!(slots.appendInner || props.appendInnerIcon || hasClear);
      const label = slots.label ? slots.label({
        label: props.label,
        props: {
          for: id.value
        }
      }) : props.label;
      return createVNode("div", mergeProps({
        "class": ["v-field", {
          "v-field--active": isActive.value,
          "v-field--appended": hasAppend,
          "v-field--disabled": props.disabled,
          "v-field--dirty": props.dirty,
          "v-field--error": props.error,
          "v-field--has-background": !!props.bgColor,
          "v-field--persistent-clear": props.persistentClear,
          "v-field--prepended": hasPrepend,
          "v-field--reverse": props.reverse,
          "v-field--single-line": props.singleLine,
          [`v-field--variant-${props.variant}`]: true
        }, themeClasses.value, backgroundColorClasses.value, focusClasses.value, loaderClasses.value],
        "style": [backgroundColorStyles.value, textColorStyles.value],
        "onClick": onClick
      }, attrs), [createVNode("div", {
        "class": "v-field__overlay"
      }, null), createVNode(LoaderSlot, {
        "name": "v-field",
        "active": props.loading,
        "color": props.error ? "error" : props.color
      }, {
        default: slots.loader
      }), hasPrepend && createVNode("div", {
        "class": "v-field__prepend-inner"
      }, [props.prependInnerIcon && createVNode(VIcon, {
        "onClick": (e) => emit("click:prepend-inner", e),
        "icon": props.prependInnerIcon
      }, null), slots == null ? void 0 : (_slots$prependInner = slots.prependInner) == null ? void 0 : _slots$prependInner.call(slots, slotProps.value)]), createVNode("div", {
        "class": "v-field__field"
      }, [["contained", "filled"].includes(props.variant) && hasLabel.value && createVNode(VFieldLabel, {
        "ref": floatingLabelRef,
        "class": [textColorClasses.value],
        "floating": true
      }, {
        default: () => [label]
      }), createVNode(VFieldLabel, {
        "ref": labelRef,
        "for": id.value
      }, {
        default: () => [label]
      }), (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, __spreadProps(__spreadValues({}, slotProps.value), {
        props: {
          id: id.value,
          class: "v-field__input"
        },
        focus,
        blur
      }))]), hasClear && createVNode(VExpandXTransition, null, {
        default: () => [withDirectives(createVNode("div", {
          "class": "v-field__clearable"
        }, [slots.clear ? slots.clear() : createVNode(VIcon, {
          "onClick": (e) => emit("click:clear", e),
          "icon": props.clearIcon
        }, null)]), [[vShow, props.dirty]])]
      }), hasAppend && createVNode("div", {
        "class": "v-field__append-inner"
      }, [slots == null ? void 0 : (_slots$appendInner = slots.appendInner) == null ? void 0 : _slots$appendInner.call(slots, slotProps.value), props.appendInnerIcon && createVNode(VIcon, {
        "onClick": (e) => emit("click:append-inner", e),
        "icon": props.appendInnerIcon
      }, null)]), createVNode("div", {
        "class": ["v-field__outline", textColorClasses.value]
      }, [isOutlined && createVNode(Fragment, null, [createVNode("div", {
        "class": "v-field__outline__start"
      }, null), hasLabel.value && createVNode("div", {
        "class": "v-field__outline__notch"
      }, [createVNode(VFieldLabel, {
        "ref": floatingLabelRef,
        "floating": true
      }, {
        default: () => [label]
      })]), createVNode("div", {
        "class": "v-field__outline__end"
      }, null)]), ["plain", "underlined"].includes(props.variant) && hasLabel.value && createVNode(VFieldLabel, {
        "ref": floatingLabelRef,
        "floating": true
      }, {
        default: () => [label]
      })])]);
    });
    return {
      controlRef
    };
  }
});
function filterFieldProps(attrs) {
  return pick(attrs, Object.keys(VField.props));
}

// node_modules/vuetify/lib/components/VCounter/VCounter.mjs
import "D:/Muhammad Aziz Taufiqurrahman/Data Aziz Taufiqurrahman/Kuliah Polban/Semester 5/Pengembangan Web/TugasBesar/GridJournal/GridJournal2/node_modules/vuetify/lib/components/VCounter/VCounter.css";
var VCounter = defineComponent({
  name: "VCounter",
  functional: true,
  props: __spreadValues({
    active: Boolean,
    max: [Number, String],
    value: {
      type: [Number, String],
      default: 0
    }
  }, makeTransitionProps({
    transition: {
      component: VSlideYTransition
    }
  })),
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const counter = computed(() => {
      return props.max ? `${props.value} / ${props.max}` : String(props.value);
    });
    return () => {
      return createVNode(MaybeTransition, {
        "transition": props.transition
      }, {
        default: () => [withDirectives(createVNode("div", {
          "class": "v-counter"
        }, [slots.default ? slots.default({
          counter: counter.value,
          max: props.max,
          value: props.value
        }) : counter.value]), [[vShow, props.active]])]
      });
    };
  }
});

export {
  VFieldLabel,
  makeVFieldProps,
  VField,
  filterFieldProps,
  VCounter
};
//# sourceMappingURL=chunk-O4DTQII2.js.map
