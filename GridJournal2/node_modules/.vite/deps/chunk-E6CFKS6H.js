import {
  useProxiedModel
} from "./chunk-XGHWVP2J.js";
import {
  getCurrentInstanceName,
  propsFactory
} from "./chunk-UQ3Q3FRV.js";
import {
  computed
} from "./chunk-D573C25J.js";

// node_modules/vuetify/lib/composables/focus.mjs
var makeFocusProps = propsFactory({
  focused: Boolean
}, "focus");
function useFocus(props) {
  let name = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : getCurrentInstanceName();
  const isFocused = useProxiedModel(props, "focused");
  const focusClasses = computed(() => {
    return {
      [`${name}--focused`]: isFocused.value
    };
  });
  function focus() {
    isFocused.value = true;
  }
  function blur() {
    isFocused.value = false;
  }
  return {
    focusClasses,
    isFocused,
    focus,
    blur
  };
}

export {
  makeFocusProps,
  useFocus
};
//# sourceMappingURL=chunk-E6CFKS6H.js.map
