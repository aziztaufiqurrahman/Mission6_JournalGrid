import {
  makeElevationProps,
  useElevation
} from "./chunk-QOZKO5DN.js";
import {
  VIcon,
  makeSizeProps,
  useSize
} from "./chunk-CZPMN5W5.js";
import {
  makeDensityProps,
  useDensity
} from "./chunk-IBN5M5C7.js";
import {
  makeDimensionProps,
  useDimension
} from "./chunk-QOITRFI2.js";
import {
  makeRoundedProps,
  useRounded
} from "./chunk-BDK6RZGY.js";
import {
  useBackgroundColor
} from "./chunk-GAH3NRGC.js";
import {
  makeTagProps
} from "./chunk-B4VPDV5P.js";
import {
  makeThemeProps,
  provideTheme
} from "./chunk-Y32YR2TB.js";
import {
  convertToUnit,
  defineComponent as defineComponent2
} from "./chunk-UQ3Q3FRV.js";
import {
  __spreadValues,
  computed,
  createVNode,
  defineComponent,
  inject,
  provide,
  ref,
  toRef,
  watch
} from "./chunk-D573C25J.js";

// node_modules/vuetify/lib/components/VTimeline/shared.mjs
var VTimelineSymbol = Symbol.for("vuetify:timeline");

// node_modules/vuetify/lib/components/VTimeline/VTimelineDivider.mjs
var VTimelineDivider = defineComponent({
  name: "VTimelineDivider",
  props: __spreadValues(__spreadValues(__spreadValues({
    hideDot: Boolean,
    lineColor: String,
    icon: String,
    iconColor: String,
    fillDot: Boolean,
    dotColor: String
  }, makeRoundedProps()), makeSizeProps()), makeElevationProps()),
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const timeline = inject(VTimelineSymbol);
    if (!timeline)
      throw new Error("[Vuetify] Could not find v-timeline provider");
    const {
      sizeClasses,
      sizeStyles
    } = useSize(props, "v-timeline-divider__dot");
    const {
      backgroundColorStyles,
      backgroundColorClasses
    } = useBackgroundColor(toRef(props, "dotColor"));
    const {
      backgroundColorStyles: lineColorStyles,
      backgroundColorClasses: lineColorClasses
    } = useBackgroundColor(timeline.lineColor);
    const {
      roundedClasses
    } = useRounded(props, "v-timeline-divider__dot");
    const {
      elevationClasses
    } = useElevation(props);
    return () => createVNode("div", {
      "class": ["v-timeline-divider", {
        "v-timeline-divider--fill-dot": props.fillDot
      }]
    }, [!props.hideDot && createVNode("div", {
      "class": ["v-timeline-divider__dot", roundedClasses.value, sizeClasses.value, elevationClasses.value],
      "style": sizeStyles.value
    }, [createVNode("div", {
      "class": ["v-timeline-divider__inner-dot", roundedClasses.value, backgroundColorClasses.value],
      "style": backgroundColorStyles.value
    }, [slots.default ? slots.default({
      icon: props.icon,
      iconColor: props.iconColor,
      size: props.size
    }) : props.icon ? createVNode(VIcon, {
      "icon": props.icon,
      "color": props.iconColor,
      "size": props.size
    }, null) : void 0])]), createVNode("div", {
      "class": ["v-timeline-divider__line", lineColorClasses.value],
      "style": lineColorStyles.value
    }, null)]);
  }
});

// node_modules/vuetify/lib/components/VTimeline/VTimelineItem.mjs
var VTimelineItem = defineComponent2({
  name: "VTimelineItem",
  props: __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({
    dotColor: String,
    fillDot: Boolean,
    hideDot: Boolean,
    hideOpposite: {
      type: Boolean,
      default: void 0
    },
    icon: String,
    iconColor: String
  }, makeRoundedProps()), makeElevationProps()), makeSizeProps()), makeTagProps()), makeDimensionProps()),
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const timeline = inject(VTimelineSymbol);
    if (!timeline)
      throw new Error("[Vuetify] Could not find v-timeline provider");
    const {
      dimensionStyles
    } = useDimension(props);
    const dotSize = ref(0);
    const dotRef = ref();
    watch(dotRef, (newValue) => {
      var _newValue$$el$querySe, _newValue$$el$querySe2;
      if (!newValue)
        return;
      dotSize.value = (_newValue$$el$querySe = (_newValue$$el$querySe2 = newValue.$el.querySelector(".v-timeline-divider__dot")) == null ? void 0 : _newValue$$el$querySe2.getBoundingClientRect().width) != null ? _newValue$$el$querySe : 0;
    }, {
      flush: "post"
    });
    return () => {
      var _slots$default, _slots$opposite;
      return createVNode("div", {
        "class": ["v-timeline-item", {
          "v-timeline-item--fill-dot": props.fillDot
        }],
        "style": {
          "--v-timeline-dot-size": convertToUnit(dotSize.value)
        }
      }, [createVNode("div", {
        "class": "v-timeline-item__body",
        "style": dimensionStyles.value
      }, [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]), createVNode(VTimelineDivider, {
        "ref": dotRef,
        "hideDot": props.hideDot,
        "icon": props.icon,
        "iconColor": props.iconColor,
        "size": props.size,
        "elevation": props.elevation,
        "dotColor": props.dotColor,
        "fillDot": props.fillDot,
        "rounded": props.rounded
      }, {
        default: slots.icon
      }), timeline.density.value !== "compact" && createVNode("div", {
        "class": "v-timeline-item__opposite"
      }, [!props.hideOpposite && ((_slots$opposite = slots.opposite) == null ? void 0 : _slots$opposite.call(slots))])]);
    };
  }
});

// node_modules/vuetify/lib/components/VTimeline/VTimeline.mjs
import "D:/Muhammad Aziz Taufiqurrahman/Data Aziz Taufiqurrahman/Kuliah Polban/Semester 5/Pengembangan Web/TugasBesar/GridJournal/GridJournal2/node_modules/vuetify/lib/components/VTimeline/VTimeline.css";
var VTimeline = defineComponent2({
  name: "VTimeline",
  props: __spreadValues(__spreadValues(__spreadValues({
    direction: {
      type: String,
      default: "vertical",
      validator: (v) => ["vertical", "horizontal"].includes(v)
    },
    side: {
      type: String,
      validator: (v) => v == null || ["start", "end"].includes(v)
    },
    lineInset: {
      type: [String, Number],
      default: 0
    },
    lineThickness: {
      type: [String, Number],
      default: 2
    },
    lineColor: String,
    truncateLine: {
      type: String,
      default: "start",
      validator: (v) => ["none", "start", "end", "both"].includes(v)
    }
  }, makeDensityProps()), makeTagProps()), makeThemeProps()),
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      themeClasses
    } = provideTheme(props);
    const {
      densityClasses
    } = useDensity(props);
    provide(VTimelineSymbol, {
      density: toRef(props, "density"),
      lineColor: toRef(props, "lineColor")
    });
    const sideClass = computed(() => {
      const side = props.side ? props.side : props.density !== "default" ? "end" : null;
      return side && `v-timeline--side-${side}`;
    });
    return () => {
      var _slots$default;
      return createVNode(props.tag, {
        "class": ["v-timeline", `v-timeline--${props.direction}`, {
          "v-timeline--inset-line": !!props.lineInset,
          "v-timeline--truncate-line-end": props.truncateLine === "end" || props.truncateLine === "both"
        }, themeClasses.value, densityClasses.value, sideClass.value],
        "style": {
          "--v-timeline-line-thickness": convertToUnit(props.lineThickness),
          "--v-timeline-line-inset": convertToUnit(props.lineInset)
        }
      }, {
        default: () => [(props.truncateLine === "none" || props.truncateLine === "end") && createVNode(VTimelineItem, {
          "hideDot": true
        }, null), (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]
      });
    };
  }
});

export {
  VTimelineItem,
  VTimeline
};
//# sourceMappingURL=chunk-7MPSRDCX.js.map
