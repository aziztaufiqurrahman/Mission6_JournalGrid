import {
  VOverlay
} from "./chunk-33TAYWFI.js";
import {
  makeTransitionProps
} from "./chunk-2VVRXWOG.js";
import {
  useProxiedModel
} from "./chunk-XGHWVP2J.js";
import {
  genericComponent,
  getUid
} from "./chunk-UQ3Q3FRV.js";
import {
  __spreadValues,
  computed,
  createVNode,
  mergeProps
} from "./chunk-D573C25J.js";

// node_modules/vuetify/lib/components/VTooltip/VTooltip.mjs
import "D:/Muhammad Aziz Taufiqurrahman/Data Aziz Taufiqurrahman/Kuliah Polban/Semester 5/Pengembangan Web/TugasBesar/GridJournal/GridJournal2/node_modules/vuetify/lib/components/VTooltip/VTooltip.css";
var VTooltip = genericComponent()({
  name: "VTooltip",
  inheritAttrs: false,
  props: __spreadValues({
    id: String,
    modelValue: Boolean,
    text: String,
    anchor: {
      type: String,
      default: "end"
    },
    origin: {
      type: String,
      default: "auto"
    }
  }, makeTransitionProps({
    transition: false
  })),
  emits: {
    "update:modelValue": (value) => true
  },
  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    const isActive = useProxiedModel(props, "modelValue");
    const uid = getUid();
    const id = computed(() => props.id || `v-tooltip-${uid}`);
    const anchor = computed(() => {
      return props.anchor.split(" ").length > 1 ? props.anchor : props.anchor + " center";
    });
    const origin = computed(() => {
      return props.origin === "auto" || props.origin === "overlap" || props.origin.split(" ").length > 1 || props.anchor.split(" ").length > 1 ? props.origin : props.origin + " center";
    });
    const transition = computed(() => {
      if (props.transition)
        return props.transition;
      return isActive.value ? "scale-transition" : "fade-transition";
    });
    return () => {
      return createVNode(VOverlay, mergeProps({
        "modelValue": isActive.value,
        "onUpdate:modelValue": ($event) => isActive.value = $event,
        "class": ["v-tooltip"],
        "id": id.value,
        "transition": transition.value,
        "absolute": true,
        "positionStrategy": "connected",
        "scrollStrategy": "reposition",
        "anchor": anchor.value,
        "origin": origin.value,
        "min-width": 0,
        "offset": 10,
        "scrim": false,
        "persistent": true,
        "open-on-click": false,
        "open-on-hover": true,
        "role": "tooltip",
        "eager": true,
        "activatorProps": {
          "aria-describedby": id.value
        }
      }, attrs), {
        activator: slots.activator,
        default: function() {
          var _slots$default, _slots$default2;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return (_slots$default = (_slots$default2 = slots.default) == null ? void 0 : _slots$default2.call(slots, ...args)) != null ? _slots$default : props.text;
        }
      });
    };
  }
});

export {
  VTooltip
};
//# sourceMappingURL=chunk-LJ45G3LV.js.map
