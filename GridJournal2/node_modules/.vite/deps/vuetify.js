import {
  LocaleAdapterSymbol,
  createLocaleAdapter
} from "./chunk-N5QCSLZE.js";
import {
  DisplaySymbol,
  createDisplay,
  useDisplay
} from "./chunk-6DNNOA33.js";
import {
  RtlSymbol,
  createRtl,
  provideRtl,
  useRtl
} from "./chunk-USS26UA6.js";
import {
  IconSymbol,
  VClassIcon,
  defaultSets
} from "./chunk-ZAIUG5RH.js";
import {
  useLayout
} from "./chunk-SXNYDLJD.js";
import {
  ThemeSymbol,
  createTheme,
  useTheme
} from "./chunk-WNCD4OK3.js";
import {
  DefaultsSymbol,
  createDefaults,
  mergeDeep
} from "./chunk-5VJGUPQO.js";
import "./chunk-AQK5JQX4.js";
import {
  __spreadProps,
  __spreadValues,
  h,
  reactive
} from "./chunk-JSMTFHY5.js";

// node_modules/vuetify/lib/iconsets/mdi.mjs
var aliases = {
  collapse: "mdi-chevron-up",
  complete: "mdi-check",
  cancel: "mdi-close-circle",
  close: "mdi-close",
  delete: "mdi-close-circle",
  clear: "mdi-close-circle",
  success: "mdi-check-circle",
  info: "mdi-information",
  warning: "mdi-alert-circle",
  error: "mdi-close-circle",
  prev: "mdi-chevron-left",
  next: "mdi-chevron-right",
  checkboxOn: "mdi-checkbox-marked",
  checkboxOff: "mdi-checkbox-blank-outline",
  checkboxIndeterminate: "mdi-minus-box",
  delimiter: "mdi-circle",
  sort: "mdi-arrow-up",
  expand: "mdi-chevron-down",
  menu: "mdi-menu",
  subgroup: "mdi-menu-down",
  dropdown: "mdi-menu-down",
  radioOn: "mdi-radiobox-marked",
  radioOff: "mdi-radiobox-blank",
  edit: "mdi-pencil",
  ratingEmpty: "mdi-star-outline",
  ratingFull: "mdi-star",
  ratingHalf: "mdi-star-half-full",
  loading: "mdi-cached",
  first: "mdi-page-first",
  last: "mdi-page-last",
  unfold: "mdi-unfold-more-horizontal",
  file: "mdi-paperclip",
  plus: "mdi-plus",
  minus: "mdi-minus"
};
var mdi = {
  component: (props) => h(VClassIcon, __spreadProps(__spreadValues({}, props), {
    class: "mdi"
  }))
};

// node_modules/vuetify/lib/framework.mjs
var createVuetify = function() {
  let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  const install = (app) => {
    const {
      components = {},
      directives = {},
      icons = {}
    } = options;
    for (const key in directives) {
      const directive = directives[key];
      app.directive(key, directive);
    }
    for (const key in components) {
      const component = components[key];
      app.component(key, component);
    }
    app.provide(DefaultsSymbol, createDefaults(options.defaults));
    app.provide(DisplaySymbol, createDisplay(options.display));
    app.provide(ThemeSymbol, createTheme(app, options.theme));
    app.provide(IconSymbol, mergeDeep({
      defaultSet: "mdi",
      sets: __spreadProps(__spreadValues({}, defaultSets), {
        mdi
      }),
      aliases
    }, icons));
    const {
      adapter,
      rootInstance
    } = createLocaleAdapter(app, options == null ? void 0 : options.locale);
    app.provide(LocaleAdapterSymbol, adapter);
    app.provide(RtlSymbol, createRtl(rootInstance, options == null ? void 0 : options.locale));
    function inject(key) {
      var _vm$parent$provides, _vm$parent, _vm$vnode$appContext;
      const vm = this.$;
      const provides = (_vm$parent$provides = (_vm$parent = vm.parent) == null ? void 0 : _vm$parent.provides) != null ? _vm$parent$provides : (_vm$vnode$appContext = vm.vnode.appContext) == null ? void 0 : _vm$vnode$appContext.provides;
      if (provides && key in provides) {
        return provides[key];
      }
    }
    app.mixin({
      computed: {
        $vuetify() {
          return reactive({
            defaults: inject.call(this, DefaultsSymbol),
            display: inject.call(this, DisplaySymbol),
            theme: inject.call(this, ThemeSymbol),
            icons: inject.call(this, IconSymbol),
            locale: inject.call(this, LocaleAdapterSymbol),
            rtl: inject.call(this, RtlSymbol)
          });
        }
      }
    });
  };
  return {
    install
  };
};
export {
  createVuetify,
  provideRtl,
  useDisplay,
  useLayout,
  useRtl,
  useTheme
};
//# sourceMappingURL=vuetify.js.map
