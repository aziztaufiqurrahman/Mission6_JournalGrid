{
  "version": 3,
  "sources": ["../../vuetify/src/directives/click-outside/index.ts"],
  "sourcesContent": ["import { attachedRoot } from '@/util'\nimport type { DirectiveBinding } from 'vue'\n\ninterface ClickOutsideBindingArgs {\n  handler: (e: MouseEvent) => void\n  closeConditional?: (e: Event) => boolean\n  include?: () => HTMLElement[]\n}\n\ninterface ClickOutsideDirectiveBinding extends DirectiveBinding {\n  value: ((e: MouseEvent) => void) | ClickOutsideBindingArgs\n}\n\nfunction defaultConditional () {\n  return true\n}\n\nfunction checkEvent (e: MouseEvent, el: HTMLElement, binding: ClickOutsideDirectiveBinding): boolean {\n  // The include element callbacks below can be expensive\n  // so we should avoid calling them when we're not active.\n  // Explicitly check for false to allow fallback compatibility\n  // with non-toggleable components\n  if (!e || checkIsActive(e, binding) === false) return false\n\n  // If we're clicking inside the shadowroot, then the app root doesn't get the same\n  // level of introspection as to _what_ we're clicking. We want to check to see if\n  // our target is the shadowroot parent container, and if it is, ignore.\n  const root = attachedRoot(el)\n  if (\n    typeof ShadowRoot !== 'undefined' &&\n    root instanceof ShadowRoot &&\n    root.host === e.target\n  ) return false\n\n  // Check if additional elements were passed to be included in check\n  // (click must be outside all included elements, if any)\n  const elements = ((typeof binding.value === 'object' && binding.value.include) || (() => []))()\n  // Add the root element for the component this directive was defined on\n  elements.push(el)\n\n  // Check if it's a click outside our elements, and then if our callback returns true.\n  // Non-toggleable components should take action in their callback and return falsy.\n  // Toggleable can return true if it wants to deactivate.\n  // Note that, because we're in the capture phase, this callback will occur before\n  // the bubbling click event on any outside elements.\n  return !elements.some(el => el?.contains(e.target as Node))\n}\n\nfunction checkIsActive (e: MouseEvent, binding: ClickOutsideDirectiveBinding): boolean | void {\n  const isActive = (typeof binding.value === 'object' && binding.value.closeConditional) || defaultConditional\n\n  return isActive(e)\n}\n\nfunction directive (e: MouseEvent, el: HTMLElement, binding: ClickOutsideDirectiveBinding) {\n  const handler = typeof binding.value === 'function' ? binding.value : binding.value.handler\n\n  el._clickOutside!.lastMousedownWasOutside && checkEvent(e, el, binding) && setTimeout(() => {\n    checkIsActive(e, binding) && handler && handler(e)\n  }, 0)\n}\n\nfunction handleShadow (el: HTMLElement, callback: Function): void {\n  const root = attachedRoot(el)\n\n  callback(document)\n\n  if (typeof ShadowRoot !== 'undefined' && root instanceof ShadowRoot) {\n    callback(root)\n  }\n}\n\nexport const ClickOutside = {\n  // [data-app] may not be found\n  // if using bind, inserted makes\n  // sure that the root element is\n  // available, iOS does not support\n  // clicks on body\n  mounted (el: HTMLElement, binding: ClickOutsideDirectiveBinding) {\n    const onClick = (e: Event) => directive(e as MouseEvent, el, binding)\n    const onMousedown = (e: Event) => {\n      el._clickOutside!.lastMousedownWasOutside = checkEvent(e as MouseEvent, el, binding)\n    }\n\n    handleShadow(el, (app: HTMLElement) => {\n      app.addEventListener('click', onClick, true)\n      app.addEventListener('mousedown', onMousedown, true)\n    })\n\n    if (!el._clickOutside) {\n      el._clickOutside = {\n        lastMousedownWasOutside: true,\n      }\n    }\n\n    el._clickOutside[binding.instance!.$.uid] = {\n      onClick,\n      onMousedown,\n    }\n  },\n\n  unmounted (el: HTMLElement, binding: ClickOutsideDirectiveBinding) {\n    if (!el._clickOutside) return\n\n    handleShadow(el, (app: HTMLElement) => {\n      if (!app || !el._clickOutside?.[binding.instance!.$.uid]) return\n\n      const { onClick, onMousedown } = el._clickOutside[binding.instance!.$.uid]!\n\n      app.removeEventListener('click', onClick, true)\n      app.removeEventListener('mousedown', onMousedown, true)\n    })\n\n    delete el._clickOutside[binding.instance!.$.uid]\n  },\n}\n\nexport default ClickOutside\n"],
  "mappings": ";;;;;AAaA,8BAA+B;AAC7B,SAAO;AACR;AAED,oBAAqB,GAAe,IAAiB,SAAgD;AAKnG,MAAI,CAAC,KAAK,cAAc,GAAG,OAAJ,MAAiB;AAAO,WAAO;AAKtD,QAAM,OAAO,aAAa,EAAD;AACzB,MACE,OAAO,eAAe,eACtB,gBAAgB,cAChB,KAAK,SAAS,EAAE;AAChB,WAAO;AAIT,QAAM,WAAa,QAAO,QAAQ,UAAU,YAAY,QAAQ,MAAM,WAAa,OAAM,CAAA,IAAxE;AAEjB,WAAS,KAAK,EAAd;AAOA,SAAO,CAAC,SAAS,KAAK,SAAM,OAAJ,OAAA,SAAI,IAAI,SAAS,EAAE,MAAf,CAApB;AACT;AAED,uBAAwB,GAAe,SAAuD;AAC5F,QAAM,WAAY,OAAO,QAAQ,UAAU,YAAY,QAAQ,MAAM,oBAAqB;AAE1F,SAAO,SAAS,CAAD;AAChB;AAED,mBAAoB,GAAe,IAAiB,SAAuC;AACzF,QAAM,UAAU,OAAO,QAAQ,UAAU,aAAa,QAAQ,QAAQ,QAAQ,MAAM;AAEpF,KAAG,cAAe,2BAA2B,WAAW,GAAG,IAAI,OAAR,KAAoB,WAAW,MAAM;AAC1F,kBAAc,GAAG,OAAJ,KAAgB,WAAW,QAAQ,CAAD;EAChD,GAAE,CAFkF;AAGtF;AAED,sBAAuB,IAAiB,UAA0B;AAChE,QAAM,OAAO,aAAa,EAAD;AAEzB,WAAS,QAAD;AAER,MAAI,OAAO,eAAe,eAAe,gBAAgB,YAAY;AACnE,aAAS,IAAD;EACT;AACF;AAEM,IAAM,eAAe;EAM1B,QAAS,IAAiB,SAAuC;AAC/D,UAAM,UAAW,OAAa,UAAU,GAAiB,IAAI,OAAtB;AACvC,UAAM,cAAe,OAAa;AAChC,SAAG,cAAe,0BAA0B,WAAW,GAAiB,IAAI,OAAtB;IACvD;AAED,iBAAa,IAAK,SAAqB;AACrC,UAAI,iBAAiB,SAAS,SAAS,IAAvC;AACA,UAAI,iBAAiB,aAAa,aAAa,IAA/C;IACD,CAHW;AAKZ,QAAI,CAAC,GAAG,eAAe;AACrB,SAAG,gBAAgB;QACjB,yBAAyB;MADR;IAGpB;AAED,OAAG,cAAc,QAAQ,SAAU,EAAE,OAAO;MAC1C;MACA;IAF0C;EAI7C;EAED,UAAW,IAAiB,SAAuC;AACjE,QAAI,CAAC,GAAG;AAAe;AAEvB,iBAAa,IAAK,SAAqB;AAAA,UAAA;AACrC,UAAI,CAAC,OAAO,CAAA,sBAAC,GAAG,kBAAJ,QAAC,kBAAmB,QAAQ,SAAU,EAAE;AAAM;AAE1D,YAAM;QAAE;QAAS;UAAgB,GAAG,cAAc,QAAQ,SAAU,EAAE;AAEtE,UAAI,oBAAoB,SAAS,SAAS,IAA1C;AACA,UAAI,oBAAoB,aAAa,aAAa,IAAlD;IACD,CAPW;AASZ,WAAO,GAAG,cAAc,QAAQ,SAAU,EAAE;EAC7C;AA1CyB;",
  "names": []
}
